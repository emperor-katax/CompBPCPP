// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/Actor.h"
#include "KeyRef_02.generated.h"

UCLASS()
class COMPCP_01_API AKeyRef_02 : public AActor
{
	GENERATED_BODY()
	
public:	
	// Sets default values for this actor's properties
	AKeyRef_02();

	// Using the UPROPERTY and UFUNCTION macros to expose variables and functions to the editor.
	// https://docs.unrealengine.com/en-US/Programming/Tutorials/VariablesTimersEvents/2/index.html
	// --> right click on UPROPERTY in VS and check declaration -- 

	// .. your comment for Value_01
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "KeyRef_02 integer")
		int Value_01;

	//.. your comment for Value_02
	UPROPERTY(BlueprintReadOnly, VisibleAnywhere, Category = "KeyRef_02 Float")
		float Value_02;

	UPROPERTY(BlueprintReadWrite, EditDefaultsOnly, Category = "KeyRef_02 Bool")
		bool Flag_01;

	UPROPERTY(BlueprintReadWrite, EditInstanceOnly, Category = "KeyRef_02 Actor")
		AActor* Object_01;

	// --
	// .. your comment for BlueprintReadWrite Value_A
	UPROPERTY(BlueprintReadWrite, Category = "KeyRef_02 Value A")
		int Value_A;

	// .. your comment for BlueprintReadOnly Value_B
	UPROPERTY(BlueprintReadOnly, Category = "KeyRef_02 Value B")
		int Value_B;

	// https://docs.unrealengine.com/en-US/Programming/UnrealArchitecture/Reference/Properties/Specifiers/index.html  Property Specifiers
	// ---------------------------------------------------------------------------

	// Player Skill level 
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "KeyRef_02 Skill", meta = (DisplayName = "Skill Level"))
		int Value_C_01;

	// Player Skill overdrive range
	UPROPERTY(BlueprintReadOnly, EditAnywhere, Category = "KeyRef_02 Skill", meta = (DisplayName = "Overdrive", ClampMin = "-12", ClampMax = "12"))
		int Value_C_02;

	// https://docs.unrealengine.com/en-US/Programming/UnrealArchitecture/Reference/Metadata/index.html  Metadata Specifiers

	UPROPERTY(BlueprintReadOnly, EditAnywhere, Category = "KeyRef_02 Skill")
		int Value_C_03;
	
	// --> right click on UFUNCTION in VS and check declaration --

	// check activation
	UFUNCTION(BlueprintCallable, Category = "Actor_BP Functions")
		bool isActive();
	// check extra 
	UFUNCTION(BlueprintPure, Category = "Actor_BP Functions")
		bool isExtra();

	/// This function is designed to be overridden by a blueprint.  Do not provide a body for this function;
	/// the autogenerated code will include a thunk that calls ProcessEvent to execute the overridden body.
	//BlueprintImplementableEvent,

	/// This function is designed to be overridden by a blueprint, but also has a native implementation.
	/// Provide a body named [FunctionName]_Implementation instead of [FunctionName]; the autogenerated
	/// code will include a thunk that calls the implementation method when necessary.
	//BlueprintNativeEvent,

	// https://docs.unrealengine.com/en-US/Programming/Introduction/index.html
	
	// set skill 
	UFUNCTION(BlueprintImplementableEvent, Category = "Actor_BP Events")
		void SkillSet();

	// control skill
	UFUNCTION(BlueprintNativeEvent, Category = "Actor_BP Events")
		void SkillControl();

	// get and set values by event
	// https://forums.unrealengine.com/development-discussion/c-gameplay-programming/23384-blueprintimplementableevent-bug
	// https://answers.unrealengine.com/questions/57955/return-a-value-from-a-blueprintimplementableevent.html
	// https://answers.unrealengine.com/questions/338927/pass-tassetptr-to-blueprintimplementableevent.html <-- TArray exceptions 
	
	// control maximum skill
	UFUNCTION(BlueprintNativeEvent, Category = "Actor_BP Events")
		bool SkillMAX();



protected:
	// Called when the game starts or when spawned
	virtual void BeginPlay() override;

public:	
	// Called every frame
	virtual void Tick(float DeltaTime) override;

	// void
	void setDistance();
	void setName(FString name);
	void setActive(bool bActive = true);
	//void setActive(bool bActive = true, int value);		//	<-- ERROR --------------- !
	//void setActive(int value, bool bActive = true);		//	<-- OK
	//void setActive(bool bActive = true, int value = 4);	//	<-- OK
	//void setActive(int value, bool bActive = true, int set = 4, bool bExtra = false); //	<-- OK

	// return
	int getDistance();
	FString getName(int id);
 
	bool Flag_018 = true;

};
